color4 light(in color3 cubeLoc, in sViewport vp, in pointLight pL)
{
    sCoord surfacePosition = vp.uv;
    color3 surfaceNormal = normalize(color3(surfacePosition, 1.0));
    color3 lightPosition = normalize(pL.center.xyz - color3(surfacePosition, 1.0));
    sScalar diffuseCoefficient = max(0.0, dot(surfaceNormal, lightPosition));
    sScalar dist = dot(sCoord(1.0, 1.0), surfacePosition);
    sScalar attenuation = 1.0 / (1.0 + dist/pL.intensity + (dist * dist)/(pL.intensity * pL.intensity));    
    sScalar diffuseIntensity = diffuseCoefficient * attenuation;
    color4 finalColor = diffuseIntensity * texture(iChannel0, cubeLoc) * pL.color;
  	
    return finalColor;                            
}
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
   
    // create light
    pointLight pL = initLight(color3(1.0, 1.0, 1.0), color4(1.0, 0.5, 0.0, 1.0), 1000.0);

    // calculate cubeloc
    color3 cubeLoc = ray.direction.xyz;
    //sScalar dir = iTime;
    //cubeLoc *= rotationMatrix(dir);
    
    //creates a cubemap with the Lambertian model
    fragColor += light(cubeLoc, vp, pL);
}