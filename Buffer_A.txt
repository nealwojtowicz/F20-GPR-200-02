color4 calcColor(in sViewport vp, in sRay ray, in sCoord fragCoord)
{
    /*
    sCoord uv = fragCoord / iChannelResolution[0].xy;
    vp.uv -= 0.5;
    vp.uv.x *= vp.aspectRatio;
    sScalar dist = length(vp.uv);
    
    if(dist < 0.1)
    {
        
    }
    else
    {
        color3 cubeLoc = ray.direction.xyz;
    	return color4(texture(iChannel0, cubeLoc));
    }
	*/
    
    color3 cubeLoc = ray.direction.xyz;
    return color4(texture(iChannel0, cubeLoc));
}
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    
    fragColor += calcColor(vp, ray, fragCoord);
}