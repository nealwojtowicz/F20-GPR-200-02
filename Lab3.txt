// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv, out float aspect, out vec2 resolutionInv, in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin, in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
    //rayDirection = vec4(0.0, mix(viewport.x, viewport.y, 1.0), -focalLength, 0.0);
}
/*
//ch5
bool hitSphere(in vec4 center, float radius, in vec4 rayDirection, in vec4 rayOrigin)
{
    vec4 oc = rayOrigin - center;
    float a = dot(rayDirection, rayDirection);
    float b = 2.0 * dot(oc, rayDirection);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = b * b - 4.0 * a * c;
    return(discriminant > 0.0);
}
*/

//ch6
float length_squared(in vec4 vectorFour)
{
    return (vectorFour.x * vectorFour.x) + (vectorFour.y * vectorFour.y) + (vectorFour.z * vectorFour.z);
}
float hit_sphere(in vec4 center, float radius, in vec4 rayDirection, in vec4 rayOrigin)
{
    vec4 oc = rayOrigin - center;
    float a = length_squared(rayDirection);
    float half_b = dot(oc, rayDirection);
    float c = length_squared(oc) - radius * radius;
    float discriminant = half_b * half_b - a * c;
    if (discriminant > 0.0)
    	return(-half_b - sqrt(discriminant)) / (a);
    else
        return -1.0;
}
vec4 at(float t, in vec4  rayOrigin, in vec4 rayDirection)
{
 	return rayOrigin + (t * rayDirection);
}
vec4 unitVector(in vec4 rayDirection)
{
    return rayDirection / length(rayDirection);
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
    /*
    //ch5
    if (hitSphere(vec4(0.0, 0.0, -1.0, 1.0), 0.5, rayDirection, rayOrigin))
    {
        return vec4(1.0, 0.0, 0.0, 1.0);
    }
    float t = 0.5 * (rayDirection.y + 1.0);
    return vec4((1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0), 1.0);
    */
    
	//ch6
    float t = hit_sphere(vec4(0.0, 0.0, -1.0, 1.0), 0.5, rayDirection, rayOrigin);
    if (t > 0.0)
    {
     	vec4 n = (at(t, rayOrigin, rayDirection) - vec4(0.0, 0.0, -1.0, 1.0));
        return 0.5 * vec4(n.x + 1.0, n.y + 1.0, n.z + 1.0, 1.0);
    }
    vec4 unit_direction = unitVector(rayDirection);
    t = 0.5 * (unit_direction.y + 1.0);
    return ((1.0 - t) * vec4(1.0, 1.0, 1.0, 1.0)) + (t * vec4(0.5, 0.7, 1.0, 1.0));
    
}



// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv, viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin, viewport, focalLength);

    // color
    fragColor = calcColor(rayDirection, rayOrigin);

    // TEST COLOR:
    //  -> what do the other things calculated above look like?
    //fragColor = vec4(viewport, 0.0, 0.0);
    //fragColor = vec4(ndc, 0.0, 0.0);
    //fragColor = vec4(uv, 0.0, 0.0);
}

/*
if (__VERSION__ == 300) //tests which version you think you are using when it turns white
        fragColor = vec4(1.0);

Fragment shader algorithm

#version 300 es //determines version of GLSL you are using

//inputs (later)

//uniforms (see above in shader inputs)

//output
layout(location = 0) out vec4 rtFragColor; // layout allows you to select a render target

//shadertoy
void mainImage(out vec4 fragColor, in vec2 fragCooord);

void main()
{
	// shadertoy does this without you seeing it
	mainImage(rtFragColor, gl_FragCoord.xy);
}
*/