#version 300 es

#ifdef GL_ES
precision highp float;
#endif

layout (location = 0) out vec4 rtFragColor;

in vec2 vTexcoord;
in vec4 vPosClip;
in vec4 vColor;
in vec4 vNormal;
in vec4 vLight;
in float vIntensity;

uniform sampler2D uTex;

void main()
{
	//SCENE PASS
	vec4 N = normalize(vNormal);
	vec4 L = normalize(vLight - vPosClip);
	float diffCoe = max(0.0, dot(N, L));
	float dist = dot(vLight, vPosClip);
	float atten = 1.0 / (1.0 + dist/vIntensity + (dist * dist)/(vIntensity * vIntensity));
	float diffInt = diffCoe * atten;
	
	vec3 H1 = normalize(L.xyz * L.xyz - 0.1);
	//vec3 H2 = normalize(L.xyz * L.xyz);
	//vec3 H3 = normalize(L.xyz * L.xyz - 0.2);
	float spec = max(0.0, dot(N.xyz, H1));
	//float spec2 = max(0.0, dot(N.xyz, H2));
	//float spec3 = max(0.0, dot(N.xyz, H3));
	
	vec4 phongModel = 0.5 * vec4(1.0, 0.5, 0.0, 1.0) + diffInt * N * vColor + pow(spec, 64.0) * vec4(1.0);
	//vec4 phongModel = 0.5 * vec4(1.0, 0.5, 0.0, 1.0) + diffInt * N * vColor + pow(spec, 64.0) * vec4(1.0, 0.0, 0.0, 1.0) + pow(spec2, 64.0) * vec4(0.0, 1.0, 0.0, 1.0) + pow(spec3, 64.0) * vec4(0.0, 0.0, 1.0, 1.0);
	
	//rtFragColor = vPosClip; //solid color
	rtFragColor = phongModel; //phong model
	//rtFragColor = texture(uTex, vTexcoord);
	
	//MANUAL PERSPECTIVE DIVIDE
	vec4 NDC = vPosClip / vPosClip.w;
	//rtFragColor = NDC;
	// [-1, +1] contains visible space
	
	// SCREEN-SPACE (uv -> [0, 1] range instead)
	vec4 uv = NDC * 0.5 + 0.5;
	//rtFragColor = uv;
	
	//take out blue
	//rtFragColor.b = 0.0;
	
	//BLOOM PASS
	/*
	vec2 dir = 1.0 / vTexcoord;
	vec2 cp = uv.xy + 0.5 * dir;
	vec2 cn = cp - dir;
	
	vec4 col = (texture(uTex, cp) + texture(uTex, cn)) * 20.0;
	col += (texture(uTex, cp += dir) + texture(uTex, cn -= dir)) * 15.0;
	col += (texture(uTex, cp += dir) + texture(uTex, cn -= dir)) * 6.0;
	col += (texture(uTex, cp += dir) + texture(uTex, cn -= dir));
	
	rtFragColor = (col * 0.01190476);
	*/
}