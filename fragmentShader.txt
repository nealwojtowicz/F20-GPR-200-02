#version 300 es
//alt -> #version 450

#ifdef GL_ES
precision highp float;
#endif //GL_ES

//**render target and is not related to the VS version of layout**
layout (location = 0) out vec4 rtFragColor; //0 represents which layer
//alt -> out vec4 rtFragColor;

//UNIFORMS
uniform sampler2D texture1;
uniform sampler2D texture2;

//PER-VERTEX: final color inbound
in vec4 vColor;

//PER-FRAGMENT: receive requirements for final color
in vec4 vNormal;
in vec4 vTexCoord;
in vec4 vLight;
in vec4 vPosition;
in float vIntensity;

void main()
{
	//PER-VERTEX:
	//rtFragColor = vColor;
	
	//PER-FRAGMENT: calc and display
	vec4 N = normalize(vNormal); //transfer to unit length
	vec4 L = normalize(vLight - vPosition);
	float diffuseCoe = max(0.0, dot(N, L));
	float dist = dot(vLight, vPosition);
	float atten = 1.0 / (1.0 + dist/vIntensity + (dist * dist)/(vIntensity * vIntensity));
	float diffuseInt = diffuseCoe * atten;
	
	vec3 H = normalize(L.xyz * L.xyz - 0.1);
	vec3 H2 = normalize(L.xyz * L.xyz);
	vec3 H3 = normalize(L.xyz * L.xyz - 0.2);
	vec4 R = reflect(-L, N);
	vec4 V = normalize(-vLight);
	float spec = max(0.0, dot(N.xyz, H));
	float spec2 = max(0.0, dot(N.xyz, H2));
	float spec3 = max(0.0, dot(N.xyz, H3));
	
	//rtFragColor = 0.5 * vec4(0.25, 0.25, 0.5, 1.0) + diffuseInt * N * vColor + pow(spec, 64.0) * vec4(1.0, 0.0, 0.0, 1.0) + pow(spec2, 64.0) * vec4(0.0, 1.0, 0.0, 1.0) + pow(spec3, 64.0) * vec4(0.0, 0.0, 1.0, 1.0);
	rtFragColor = texture(texture1, vTexCoord.xy);
}